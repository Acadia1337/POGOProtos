// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Networking.Signature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Signature {

  /// <summary>Holder for reflection information generated from POGOProtos.Networking.Signature.proto</summary>
  public static partial class POGOProtosNetworkingSignatureReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Networking.Signature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosNetworkingSignatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQT0dPUHJvdG9zLk5ldHdvcmtpbmcuU2lnbmF0dXJlLnByb3RvEh9QT0dP",
            "UHJvdG9zLk5ldHdvcmtpbmcuU2lnbmF0dXJlItkECglTaWduYXR1cmUauQEK",
            "C0xvY2F0aW9uRml4EhAKCHByb3ZpZGVyGAEgASgJEh0KFXRpbWVzdGFtcF9z",
            "aW5jZV9zdGFydBgCIAEoBBIQCghsYXRpdHVkZRgNIAEoARIRCglsb25naXR1",
            "ZGUYDiABKAESEQoJdW5rbm93bjIwGBQgASgBEhAKCGFsdGl0dWRlGBUgASgB",
            "EhEKCXVua25vd24yMhgWIAEoARINCgV1bmsyNhgaIAEoBBINCgV1bmsyOBgc",
            "IAEoBBpyCg5Vbmtub3duQmluYXJ5NRIMCgR1bmsyGAIgASgMEgwKBHVuazMY",
            "AyABKAwSDAoEdW5rNBgEIAEoDBIMCgR1bms1GAUgASgMEgwKBHVuazYYBiAB",
            "KAwSDAoEdW5rNxgHIAEoDBIMCgR1bms4GAggASgMGpsCCgpTZW5zb3JJbmZv",
            "EhoKEnRpbWVzdGFtcF9zbmFwc2hvdBgBIAEoBBIMCgR1bmszGAMgASgEEgwK",
            "BHVuazQYBCABKAQSDAoEdW5rNRgFIAEoBBISCgp1bms2X2FuZ2xlGAYgASgB",
            "EhIKCnVuazdfYW5nbGUYByABKAESEgoKdW5rOF9hbmdsZRgIIAEoARINCgV1",
            "bmsxMBgKIAEoBBINCgV1bmsxMRgLIAEoBBINCgV1bmsxMhgMIAEoBBINCgV1",
            "bmsxMxgNIAEoBBINCgV1bmsxNBgOIAEoBBIPCgdhY2NlbF94GBAgASgBEg8K",
            "B2FjY2VsX3kYESABKAESDwoHYWNjZWxfehgSIAEoARINCgV1bmsxORgTIAEo",
            "BGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature), global::POGOProtos.Networking.Signature.Signature.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.LocationFix), global::POGOProtos.Networking.Signature.Signature.Types.LocationFix.Parser, new[]{ "Provider", "TimestampSinceStart", "Latitude", "Longitude", "Unknown20", "Altitude", "Unknown22", "Unk26", "Unk28" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.UnknownBinary5), global::POGOProtos.Networking.Signature.Signature.Types.UnknownBinary5.Parser, new[]{ "Unk2", "Unk3", "Unk4", "Unk5", "Unk6", "Unk7", "Unk8" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo), global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo.Parser, new[]{ "TimestampSnapshot", "Unk3", "Unk4", "Unk5", "Unk6Angle", "Unk7Angle", "Unk8Angle", "Unk10", "Unk11", "Unk12", "Unk13", "Unk14", "AccelX", "AccelY", "AccelZ", "Unk19" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Signature.POGOProtosNetworkingSignatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Signature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LocationFix : pb::IMessage<LocationFix> {
        private static readonly pb::MessageParser<LocationFix> _parser = new pb::MessageParser<LocationFix>(() => new LocationFix());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LocationFix> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix(LocationFix other) : this() {
          provider_ = other.provider_;
          timestampSinceStart_ = other.timestampSinceStart_;
          latitude_ = other.latitude_;
          longitude_ = other.longitude_;
          unknown20_ = other.unknown20_;
          altitude_ = other.altitude_;
          unknown22_ = other.unknown22_;
          unk26_ = other.unk26_;
          unk28_ = other.unk28_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix Clone() {
          return new LocationFix(this);
        }

        /// <summary>Field number for the "provider" field.</summary>
        public const int ProviderFieldNumber = 1;
        private string provider_ = "";
        /// <summary>
        ///  On iOS there are some LocationFixes with unk26=1 and everything else empty
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Provider {
          get { return provider_; }
          set {
            provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp_since_start" field.</summary>
        public const int TimestampSinceStartFieldNumber = 2;
        private ulong timestampSinceStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TimestampSinceStart {
          get { return timestampSinceStart_; }
          set {
            timestampSinceStart_ = value;
          }
        }

        /// <summary>Field number for the "latitude" field.</summary>
        public const int LatitudeFieldNumber = 13;
        private double latitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Latitude {
          get { return latitude_; }
          set {
            latitude_ = value;
          }
        }

        /// <summary>Field number for the "longitude" field.</summary>
        public const int LongitudeFieldNumber = 14;
        private double longitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Longitude {
          get { return longitude_; }
          set {
            longitude_ = value;
          }
        }

        /// <summary>Field number for the "unknown20" field.</summary>
        public const int Unknown20FieldNumber = 20;
        private double unknown20_;
        /// <summary>
        ///    (iOS only)?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Unknown20 {
          get { return unknown20_; }
          set {
            unknown20_ = value;
          }
        }

        /// <summary>Field number for the "altitude" field.</summary>
        public const int AltitudeFieldNumber = 21;
        private double altitude_;
        /// <summary>
        ///    0x41aded91 -> 21.74
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Altitude {
          get { return altitude_; }
          set {
            altitude_ = value;
          }
        }

        /// <summary>Field number for the "unknown22" field.</summary>
        public const int Unknown22FieldNumber = 22;
        private double unknown22_;
        /// <summary>
        ///    (iOS only)?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Unknown22 {
          get { return unknown22_; }
          set {
            unknown22_ = value;
          }
        }

        /// <summary>Field number for the "unk26" field.</summary>
        public const int Unk26FieldNumber = 26;
        private ulong unk26_;
        /// <summary>
        ///  Always 3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk26 {
          get { return unk26_; }
          set {
            unk26_ = value;
          }
        }

        /// <summary>Field number for the "unk28" field.</summary>
        public const int Unk28FieldNumber = 28;
        private ulong unk28_;
        /// <summary>
        ///  Always 1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk28 {
          get { return unk28_; }
          set {
            unk28_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LocationFix);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LocationFix other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Provider != other.Provider) return false;
          if (TimestampSinceStart != other.TimestampSinceStart) return false;
          if (Latitude != other.Latitude) return false;
          if (Longitude != other.Longitude) return false;
          if (Unknown20 != other.Unknown20) return false;
          if (Altitude != other.Altitude) return false;
          if (Unknown22 != other.Unknown22) return false;
          if (Unk26 != other.Unk26) return false;
          if (Unk28 != other.Unk28) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Provider.Length != 0) hash ^= Provider.GetHashCode();
          if (TimestampSinceStart != 0UL) hash ^= TimestampSinceStart.GetHashCode();
          if (Latitude != 0D) hash ^= Latitude.GetHashCode();
          if (Longitude != 0D) hash ^= Longitude.GetHashCode();
          if (Unknown20 != 0D) hash ^= Unknown20.GetHashCode();
          if (Altitude != 0D) hash ^= Altitude.GetHashCode();
          if (Unknown22 != 0D) hash ^= Unknown22.GetHashCode();
          if (Unk26 != 0UL) hash ^= Unk26.GetHashCode();
          if (Unk28 != 0UL) hash ^= Unk28.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Provider.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Provider);
          }
          if (TimestampSinceStart != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TimestampSinceStart);
          }
          if (Latitude != 0D) {
            output.WriteRawTag(105);
            output.WriteDouble(Latitude);
          }
          if (Longitude != 0D) {
            output.WriteRawTag(113);
            output.WriteDouble(Longitude);
          }
          if (Unknown20 != 0D) {
            output.WriteRawTag(161, 1);
            output.WriteDouble(Unknown20);
          }
          if (Altitude != 0D) {
            output.WriteRawTag(169, 1);
            output.WriteDouble(Altitude);
          }
          if (Unknown22 != 0D) {
            output.WriteRawTag(177, 1);
            output.WriteDouble(Unknown22);
          }
          if (Unk26 != 0UL) {
            output.WriteRawTag(208, 1);
            output.WriteUInt64(Unk26);
          }
          if (Unk28 != 0UL) {
            output.WriteRawTag(224, 1);
            output.WriteUInt64(Unk28);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Provider.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
          }
          if (TimestampSinceStart != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSinceStart);
          }
          if (Latitude != 0D) {
            size += 1 + 8;
          }
          if (Longitude != 0D) {
            size += 1 + 8;
          }
          if (Unknown20 != 0D) {
            size += 2 + 8;
          }
          if (Altitude != 0D) {
            size += 2 + 8;
          }
          if (Unknown22 != 0D) {
            size += 2 + 8;
          }
          if (Unk26 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk26);
          }
          if (Unk28 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk28);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LocationFix other) {
          if (other == null) {
            return;
          }
          if (other.Provider.Length != 0) {
            Provider = other.Provider;
          }
          if (other.TimestampSinceStart != 0UL) {
            TimestampSinceStart = other.TimestampSinceStart;
          }
          if (other.Latitude != 0D) {
            Latitude = other.Latitude;
          }
          if (other.Longitude != 0D) {
            Longitude = other.Longitude;
          }
          if (other.Unknown20 != 0D) {
            Unknown20 = other.Unknown20;
          }
          if (other.Altitude != 0D) {
            Altitude = other.Altitude;
          }
          if (other.Unknown22 != 0D) {
            Unknown22 = other.Unknown22;
          }
          if (other.Unk26 != 0UL) {
            Unk26 = other.Unk26;
          }
          if (other.Unk28 != 0UL) {
            Unk28 = other.Unk28;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Provider = input.ReadString();
                break;
              }
              case 16: {
                TimestampSinceStart = input.ReadUInt64();
                break;
              }
              case 105: {
                Latitude = input.ReadDouble();
                break;
              }
              case 113: {
                Longitude = input.ReadDouble();
                break;
              }
              case 161: {
                Unknown20 = input.ReadDouble();
                break;
              }
              case 169: {
                Altitude = input.ReadDouble();
                break;
              }
              case 177: {
                Unknown22 = input.ReadDouble();
                break;
              }
              case 208: {
                Unk26 = input.ReadUInt64();
                break;
              }
              case 224: {
                Unk28 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  Only captured once
      /// </summary>
      public sealed partial class UnknownBinary5 : pb::IMessage<UnknownBinary5> {
        private static readonly pb::MessageParser<UnknownBinary5> _parser = new pb::MessageParser<UnknownBinary5>(() => new UnknownBinary5());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnknownBinary5> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnknownBinary5() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnknownBinary5(UnknownBinary5 other) : this() {
          unk2_ = other.unk2_;
          unk3_ = other.unk3_;
          unk4_ = other.unk4_;
          unk5_ = other.unk5_;
          unk6_ = other.unk6_;
          unk7_ = other.unk7_;
          unk8_ = other.unk8_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnknownBinary5 Clone() {
          return new UnknownBinary5(this);
        }

        /// <summary>Field number for the "unk2" field.</summary>
        public const int Unk2FieldNumber = 2;
        private pb::ByteString unk2_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk2 {
          get { return unk2_; }
          set {
            unk2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk3" field.</summary>
        public const int Unk3FieldNumber = 3;
        private pb::ByteString unk3_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk3 {
          get { return unk3_; }
          set {
            unk3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk4" field.</summary>
        public const int Unk4FieldNumber = 4;
        private pb::ByteString unk4_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk4 {
          get { return unk4_; }
          set {
            unk4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk5" field.</summary>
        public const int Unk5FieldNumber = 5;
        private pb::ByteString unk5_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk5 {
          get { return unk5_; }
          set {
            unk5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk6" field.</summary>
        public const int Unk6FieldNumber = 6;
        private pb::ByteString unk6_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk6 {
          get { return unk6_; }
          set {
            unk6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk7" field.</summary>
        public const int Unk7FieldNumber = 7;
        private pb::ByteString unk7_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk7 {
          get { return unk7_; }
          set {
            unk7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk8" field.</summary>
        public const int Unk8FieldNumber = 8;
        private pb::ByteString unk8_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk8 {
          get { return unk8_; }
          set {
            unk8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnknownBinary5);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnknownBinary5 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Unk2 != other.Unk2) return false;
          if (Unk3 != other.Unk3) return false;
          if (Unk4 != other.Unk4) return false;
          if (Unk5 != other.Unk5) return false;
          if (Unk6 != other.Unk6) return false;
          if (Unk7 != other.Unk7) return false;
          if (Unk8 != other.Unk8) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Unk2.Length != 0) hash ^= Unk2.GetHashCode();
          if (Unk3.Length != 0) hash ^= Unk3.GetHashCode();
          if (Unk4.Length != 0) hash ^= Unk4.GetHashCode();
          if (Unk5.Length != 0) hash ^= Unk5.GetHashCode();
          if (Unk6.Length != 0) hash ^= Unk6.GetHashCode();
          if (Unk7.Length != 0) hash ^= Unk7.GetHashCode();
          if (Unk8.Length != 0) hash ^= Unk8.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Unk2.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Unk2);
          }
          if (Unk3.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Unk3);
          }
          if (Unk4.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Unk4);
          }
          if (Unk5.Length != 0) {
            output.WriteRawTag(42);
            output.WriteBytes(Unk5);
          }
          if (Unk6.Length != 0) {
            output.WriteRawTag(50);
            output.WriteBytes(Unk6);
          }
          if (Unk7.Length != 0) {
            output.WriteRawTag(58);
            output.WriteBytes(Unk7);
          }
          if (Unk8.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(Unk8);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Unk2.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk2);
          }
          if (Unk3.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk3);
          }
          if (Unk4.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk4);
          }
          if (Unk5.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk5);
          }
          if (Unk6.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk6);
          }
          if (Unk7.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk7);
          }
          if (Unk8.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk8);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnknownBinary5 other) {
          if (other == null) {
            return;
          }
          if (other.Unk2.Length != 0) {
            Unk2 = other.Unk2;
          }
          if (other.Unk3.Length != 0) {
            Unk3 = other.Unk3;
          }
          if (other.Unk4.Length != 0) {
            Unk4 = other.Unk4;
          }
          if (other.Unk5.Length != 0) {
            Unk5 = other.Unk5;
          }
          if (other.Unk6.Length != 0) {
            Unk6 = other.Unk6;
          }
          if (other.Unk7.Length != 0) {
            Unk7 = other.Unk7;
          }
          if (other.Unk8.Length != 0) {
            Unk8 = other.Unk8;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 18: {
                Unk2 = input.ReadBytes();
                break;
              }
              case 26: {
                Unk3 = input.ReadBytes();
                break;
              }
              case 34: {
                Unk4 = input.ReadBytes();
                break;
              }
              case 42: {
                Unk5 = input.ReadBytes();
                break;
              }
              case 50: {
                Unk6 = input.ReadBytes();
                break;
              }
              case 58: {
                Unk7 = input.ReadBytes();
                break;
              }
              case 66: {
                Unk8 = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SensorInfo : pb::IMessage<SensorInfo> {
        private static readonly pb::MessageParser<SensorInfo> _parser = new pb::MessageParser<SensorInfo>(() => new SensorInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SensorInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo(SensorInfo other) : this() {
          timestampSnapshot_ = other.timestampSnapshot_;
          unk3_ = other.unk3_;
          unk4_ = other.unk4_;
          unk5_ = other.unk5_;
          unk6Angle_ = other.unk6Angle_;
          unk7Angle_ = other.unk7Angle_;
          unk8Angle_ = other.unk8Angle_;
          unk10_ = other.unk10_;
          unk11_ = other.unk11_;
          unk12_ = other.unk12_;
          unk13_ = other.unk13_;
          unk14_ = other.unk14_;
          accelX_ = other.accelX_;
          accelY_ = other.accelY_;
          accelZ_ = other.accelZ_;
          unk19_ = other.unk19_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo Clone() {
          return new SensorInfo(this);
        }

        /// <summary>Field number for the "timestamp_snapshot" field.</summary>
        public const int TimestampSnapshotFieldNumber = 1;
        private ulong timestampSnapshot_;
        /// <summary>
        ///  in ms
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TimestampSnapshot {
          get { return timestampSnapshot_; }
          set {
            timestampSnapshot_ = value;
          }
        }

        /// <summary>Field number for the "unk3" field.</summary>
        public const int Unk3FieldNumber = 3;
        private ulong unk3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk3 {
          get { return unk3_; }
          set {
            unk3_ = value;
          }
        }

        /// <summary>Field number for the "unk4" field.</summary>
        public const int Unk4FieldNumber = 4;
        private ulong unk4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk4 {
          get { return unk4_; }
          set {
            unk4_ = value;
          }
        }

        /// <summary>Field number for the "unk5" field.</summary>
        public const int Unk5FieldNumber = 5;
        private ulong unk5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk5 {
          get { return unk5_; }
          set {
            unk5_ = value;
          }
        }

        /// <summary>Field number for the "unk6_angle" field.</summary>
        public const int Unk6AngleFieldNumber = 6;
        private double unk6Angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Unk6Angle {
          get { return unk6Angle_; }
          set {
            unk6Angle_ = value;
          }
        }

        /// <summary>Field number for the "unk7_angle" field.</summary>
        public const int Unk7AngleFieldNumber = 7;
        private double unk7Angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Unk7Angle {
          get { return unk7Angle_; }
          set {
            unk7Angle_ = value;
          }
        }

        /// <summary>Field number for the "unk8_angle" field.</summary>
        public const int Unk8AngleFieldNumber = 8;
        private double unk8Angle_;
        /// <summary>
        /// 6/7/8 are angles in degrees but don't know to what.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Unk8Angle {
          get { return unk8Angle_; }
          set {
            unk8Angle_ = value;
          }
        }

        /// <summary>Field number for the "unk10" field.</summary>
        public const int Unk10FieldNumber = 10;
        private ulong unk10_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk10 {
          get { return unk10_; }
          set {
            unk10_ = value;
          }
        }

        /// <summary>Field number for the "unk11" field.</summary>
        public const int Unk11FieldNumber = 11;
        private ulong unk11_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk11 {
          get { return unk11_; }
          set {
            unk11_ = value;
          }
        }

        /// <summary>Field number for the "unk12" field.</summary>
        public const int Unk12FieldNumber = 12;
        private ulong unk12_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk12 {
          get { return unk12_; }
          set {
            unk12_ = value;
          }
        }

        /// <summary>Field number for the "unk13" field.</summary>
        public const int Unk13FieldNumber = 13;
        private ulong unk13_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk13 {
          get { return unk13_; }
          set {
            unk13_ = value;
          }
        }

        /// <summary>Field number for the "unk14" field.</summary>
        public const int Unk14FieldNumber = 14;
        private ulong unk14_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk14 {
          get { return unk14_; }
          set {
            unk14_ = value;
          }
        }

        /// <summary>Field number for the "accel_x" field.</summary>
        public const int AccelXFieldNumber = 16;
        private double accelX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelX {
          get { return accelX_; }
          set {
            accelX_ = value;
          }
        }

        /// <summary>Field number for the "accel_y" field.</summary>
        public const int AccelYFieldNumber = 17;
        private double accelY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelY {
          get { return accelY_; }
          set {
            accelY_ = value;
          }
        }

        /// <summary>Field number for the "accel_z" field.</summary>
        public const int AccelZFieldNumber = 18;
        private double accelZ_;
        /// <summary>
        ///  Always 0x40239999a0000000 in the dumps its 9.8 double
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelZ {
          get { return accelZ_; }
          set {
            accelZ_ = value;
          }
        }

        /// <summary>Field number for the "unk19" field.</summary>
        public const int Unk19FieldNumber = 19;
        private ulong unk19_;
        /// <summary>
        ///  Always 3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk19 {
          get { return unk19_; }
          set {
            unk19_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SensorInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SensorInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimestampSnapshot != other.TimestampSnapshot) return false;
          if (Unk3 != other.Unk3) return false;
          if (Unk4 != other.Unk4) return false;
          if (Unk5 != other.Unk5) return false;
          if (Unk6Angle != other.Unk6Angle) return false;
          if (Unk7Angle != other.Unk7Angle) return false;
          if (Unk8Angle != other.Unk8Angle) return false;
          if (Unk10 != other.Unk10) return false;
          if (Unk11 != other.Unk11) return false;
          if (Unk12 != other.Unk12) return false;
          if (Unk13 != other.Unk13) return false;
          if (Unk14 != other.Unk14) return false;
          if (AccelX != other.AccelX) return false;
          if (AccelY != other.AccelY) return false;
          if (AccelZ != other.AccelZ) return false;
          if (Unk19 != other.Unk19) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimestampSnapshot != 0UL) hash ^= TimestampSnapshot.GetHashCode();
          if (Unk3 != 0UL) hash ^= Unk3.GetHashCode();
          if (Unk4 != 0UL) hash ^= Unk4.GetHashCode();
          if (Unk5 != 0UL) hash ^= Unk5.GetHashCode();
          if (Unk6Angle != 0D) hash ^= Unk6Angle.GetHashCode();
          if (Unk7Angle != 0D) hash ^= Unk7Angle.GetHashCode();
          if (Unk8Angle != 0D) hash ^= Unk8Angle.GetHashCode();
          if (Unk10 != 0UL) hash ^= Unk10.GetHashCode();
          if (Unk11 != 0UL) hash ^= Unk11.GetHashCode();
          if (Unk12 != 0UL) hash ^= Unk12.GetHashCode();
          if (Unk13 != 0UL) hash ^= Unk13.GetHashCode();
          if (Unk14 != 0UL) hash ^= Unk14.GetHashCode();
          if (AccelX != 0D) hash ^= AccelX.GetHashCode();
          if (AccelY != 0D) hash ^= AccelY.GetHashCode();
          if (AccelZ != 0D) hash ^= AccelZ.GetHashCode();
          if (Unk19 != 0UL) hash ^= Unk19.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TimestampSnapshot != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(TimestampSnapshot);
          }
          if (Unk3 != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Unk3);
          }
          if (Unk4 != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Unk4);
          }
          if (Unk5 != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Unk5);
          }
          if (Unk6Angle != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Unk6Angle);
          }
          if (Unk7Angle != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Unk7Angle);
          }
          if (Unk8Angle != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Unk8Angle);
          }
          if (Unk10 != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(Unk10);
          }
          if (Unk11 != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(Unk11);
          }
          if (Unk12 != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(Unk12);
          }
          if (Unk13 != 0UL) {
            output.WriteRawTag(104);
            output.WriteUInt64(Unk13);
          }
          if (Unk14 != 0UL) {
            output.WriteRawTag(112);
            output.WriteUInt64(Unk14);
          }
          if (AccelX != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(AccelX);
          }
          if (AccelY != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(AccelY);
          }
          if (AccelZ != 0D) {
            output.WriteRawTag(145, 1);
            output.WriteDouble(AccelZ);
          }
          if (Unk19 != 0UL) {
            output.WriteRawTag(152, 1);
            output.WriteUInt64(Unk19);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimestampSnapshot != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSnapshot);
          }
          if (Unk3 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk3);
          }
          if (Unk4 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk4);
          }
          if (Unk5 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk5);
          }
          if (Unk6Angle != 0D) {
            size += 1 + 8;
          }
          if (Unk7Angle != 0D) {
            size += 1 + 8;
          }
          if (Unk8Angle != 0D) {
            size += 1 + 8;
          }
          if (Unk10 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk10);
          }
          if (Unk11 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk11);
          }
          if (Unk12 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk12);
          }
          if (Unk13 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk13);
          }
          if (Unk14 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk14);
          }
          if (AccelX != 0D) {
            size += 2 + 8;
          }
          if (AccelY != 0D) {
            size += 2 + 8;
          }
          if (AccelZ != 0D) {
            size += 2 + 8;
          }
          if (Unk19 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk19);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SensorInfo other) {
          if (other == null) {
            return;
          }
          if (other.TimestampSnapshot != 0UL) {
            TimestampSnapshot = other.TimestampSnapshot;
          }
          if (other.Unk3 != 0UL) {
            Unk3 = other.Unk3;
          }
          if (other.Unk4 != 0UL) {
            Unk4 = other.Unk4;
          }
          if (other.Unk5 != 0UL) {
            Unk5 = other.Unk5;
          }
          if (other.Unk6Angle != 0D) {
            Unk6Angle = other.Unk6Angle;
          }
          if (other.Unk7Angle != 0D) {
            Unk7Angle = other.Unk7Angle;
          }
          if (other.Unk8Angle != 0D) {
            Unk8Angle = other.Unk8Angle;
          }
          if (other.Unk10 != 0UL) {
            Unk10 = other.Unk10;
          }
          if (other.Unk11 != 0UL) {
            Unk11 = other.Unk11;
          }
          if (other.Unk12 != 0UL) {
            Unk12 = other.Unk12;
          }
          if (other.Unk13 != 0UL) {
            Unk13 = other.Unk13;
          }
          if (other.Unk14 != 0UL) {
            Unk14 = other.Unk14;
          }
          if (other.AccelX != 0D) {
            AccelX = other.AccelX;
          }
          if (other.AccelY != 0D) {
            AccelY = other.AccelY;
          }
          if (other.AccelZ != 0D) {
            AccelZ = other.AccelZ;
          }
          if (other.Unk19 != 0UL) {
            Unk19 = other.Unk19;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TimestampSnapshot = input.ReadUInt64();
                break;
              }
              case 24: {
                Unk3 = input.ReadUInt64();
                break;
              }
              case 32: {
                Unk4 = input.ReadUInt64();
                break;
              }
              case 40: {
                Unk5 = input.ReadUInt64();
                break;
              }
              case 49: {
                Unk6Angle = input.ReadDouble();
                break;
              }
              case 57: {
                Unk7Angle = input.ReadDouble();
                break;
              }
              case 65: {
                Unk8Angle = input.ReadDouble();
                break;
              }
              case 80: {
                Unk10 = input.ReadUInt64();
                break;
              }
              case 88: {
                Unk11 = input.ReadUInt64();
                break;
              }
              case 96: {
                Unk12 = input.ReadUInt64();
                break;
              }
              case 104: {
                Unk13 = input.ReadUInt64();
                break;
              }
              case 112: {
                Unk14 = input.ReadUInt64();
                break;
              }
              case 129: {
                AccelX = input.ReadDouble();
                break;
              }
              case 137: {
                AccelY = input.ReadDouble();
                break;
              }
              case 145: {
                AccelZ = input.ReadDouble();
                break;
              }
              case 152: {
                Unk19 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
